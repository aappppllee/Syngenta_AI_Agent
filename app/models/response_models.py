from typing import List as PyList, Any, Optional, Dict # Use PyList consistently
from pydantic import BaseModel, Field

class SourceDetail(BaseModel):
    """
    Details of a source document or data point used in generating the answer.
    """
    document_title: Optional[str] = Field(None, description="Title of the source document or a description of the data source (e.g., 'Supply Chain Database').")
    document_id: Optional[str] = Field(None, description="Identifier for the source document (e.g., DB table name, document primary key, or 'DATABASE').")
    page_number: Optional[int] = Field(None, description="Page number in the document, if applicable.")
    confidence_score: Optional[float] = Field(None, description="Confidence score of the retrieval or relevance, if applicable.")
    # You could add a 'type' field here too, e.g., "document_chunk", "database_table_summary"

class AnswerDetail(BaseModel):
    """
    Detailed structure of the answer provided by the intelligent agent.
    This is the 'answer' field within the main QueryResponse.
    """
    type: str = Field(..., description="Type of the answer content (e.g., 'text', 'synthesized_text', 'database_result_synthesized', 'hybrid_result', 'no_info_found_docs', 'clarification_needed', 'access_denied', 'error_nlu', 'error_db', 'error_synthesis', 'error_agent_core').")
    content: Any = Field(..., description="The main content of the answer. Can be a string, list of objects (for tables), JSON for visualizations, or an error message.")
    summary: Optional[str] = Field(None, description="An optional brief summary of the answer or error.")
    sources: Optional[PyList[SourceDetail]] = Field(default_factory=list, description="List of source documents or data points used.")
    explanation: Optional[str] = Field(None, description="Optional explanation of how the answer was derived or details about an error (e.g., generated SQL, criteria used).")
    # session_id: Optional[str] = Field(None, description="Session ID associated with this answer generation. (Handled by QueryResponse)") # Removed, as QueryResponse has it.

class QueryResponse(BaseModel):
    """
    Pydantic model for the overall API response to a /query request.
    """
    query_text: str = Field(..., description="The original query text submitted by the user.")
    answer: AnswerDetail = Field(..., description="The structured answer from the intelligent agent.")
    follow_up_suggestions: Optional[PyList[str]] = Field(default_factory=list, description="Optional list of suggested follow-up questions.")
    session_id: str = Field(..., description="Session ID for context. Client should use this for subsequent requests in the same conversation.") # Now mandatory

    class Config:
        json_schema_extra = {
            "example": {
                "query_text": "What is our company policy on inventory write-offs?",
                "answer": {
                    "type": "synthesized_text",
                    "content": "Our company policy states that inventory write-offs must be approved by the finance department and follow procedure XYZ documented in the Inventory Management Policy, section 3.2.",
                    "summary": "Policy on inventory write-offs requires finance approval.",
                    "sources": [
                        {
                            "document_title": "Inventory Management Policy.pdf",
                            "document_id": "doc_inv_mgmt_001", # Example ID
                            "page_number": 3 # Example page
                        }
                    ],
                    "explanation": "Answer generated by AI based on information retrieved from the Inventory Management Policy."
                },
                "follow_up_suggestions": [
                    "What are the steps for an inventory write-off?",
                    "Who approves inventory write-offs?"
                ],
                "session_id": "session_xyz789_new_or_existing"
            }
        }

# You can add other top-level response models here if needed,
# for example, a generic status message response.
class StatusResponse(BaseModel):
    message: str
    status_code: Optional[int] = None
    details: Optional[Dict[str, Any]] = None
