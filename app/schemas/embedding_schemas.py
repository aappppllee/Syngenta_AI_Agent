from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List as PyList
from datetime import datetime

class DocumentEmbeddingBase(BaseModel):
    chunk_text: str
    metadata: Optional[Dict[str, Any]] = None # e.g., {"source_page": 1, "chunk_seq": 0, "document_title": "..."}

class DocumentEmbeddingCreate(DocumentEmbeddingBase):
    embedding_id: str # UUID string, usually generated by system or Langchain
    policy_document_id: int
    # The vector itself is handled by the vector store, not typically part of API create schema

class DocumentEmbeddingSchema(DocumentEmbeddingBase):
    embedding_id: str
    policy_document_id: int
    created_at: datetime
    # embedding_vector: PyList[float] # Optionally expose vector; can be very large and often not needed in API responses

    class Config:
        from_attributes = True
