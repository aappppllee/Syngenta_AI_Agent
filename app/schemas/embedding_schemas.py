from pydantic import BaseModel, Field
from typing import Optional, Dict, Any, List as PyList
from datetime import datetime

class DocumentEmbeddingBase(BaseModel):
    chunk_text: str
    # This field represents the metadata associated with the chunk (e.g., source, page)
    # It's distinct from the ORM model's field name which had to be changed.
    # For API input/output, 'metadata' is a clear name for this concept.
    # The mapping to 'embedding_metadata' happens at the ORM/CRUD layer.
    metadata: Optional[Dict[str, Any]] = None 

class DocumentEmbeddingCreate(DocumentEmbeddingBase):
    embedding_id: str # UUID string, usually generated by system or Langchain
    policy_document_id: int
    # The vector itself is handled by the vector store, not typically part of API create schema

class DocumentEmbeddingSchema(DocumentEmbeddingBase):
    embedding_id: str
    policy_document_id: int
    created_at: datetime
    # If you were to expose the ORM's renamed field directly:
    # embedding_metadata_orm: Optional[Dict[str, Any]] = Field(None, alias="embedding_metadata")


    class Config:
        from_attributes = True

